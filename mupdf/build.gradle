apply plugin: 'com.android.library'

android {
    compileSdkVersion 16
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 16

        ndk {
            moduleName "mupdf1"
        }
    }

    productFlavors {
        x86 {
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
        }
        fat
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    project.ext.versionCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'mips':5, 'mips64':6, 'x86':8, 'x86_64':9] //versionCode digit for each supported ABI, with 64bit>32bit and x86>armeabi-*
//
//    libraryVariants.all { variant ->
//        // assign different version code for each output
//        variant.outputs.each { output ->
//            output.versionCodeOverride =
//                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + defaultConfig.versionCode
//        }
//    }

    sourceSets.main {
        jni.srcDirs = ['libs']
        jniLibs.srcDir 'src/main/libs'
    }

//    // call regular ndk-build(.cmd) script from app directory
//    task ndkBuild(type: Exec) {
//        commandLine 'ndk-build', '-C', file('/home/ognev/Projects/ESLReader/mupdf').absolutePath
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn ndkBuild
//    }

//    task cleanNative(type: Exec, description: 'Clean JNI object files') {
//        def ndkDir = android.ndkDirectory
//        commandLine "$ndkDir/ndk-build",
//                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
//                'clean'
//    }

    clean.dependsOn 'cleanNative'

//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn buildNative
//    }
}
